name: OpenSplat (Ubuntu CUDA)

on:
  push:
    branches:
      - main
  pull_request:
    types: [ assigned, opened, synchronize, reopened ]
  release:
    types: [ published, edited ]

jobs:
  build:
    name: ${{ matrix.os }}-cuda-${{ matrix.cuda-version }}-torch-${{ matrix.torch-version }}-${{ matrix.cmake-build-type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04] # [ubuntu-22.04, ubuntu-20.04, ubuntu-18.04]
        arch: [x64] # [x64, x86]
        torch-version: [2.3.1, 2.2.1, 2.1.2] # [1.12.0, 1.13.0, 2.0.0, 2.1.0, 2.1.1, 2.1.2, 2.2.0, 2.2.1]
        cuda-version: [11.8.0, 12.1.1] # [12.3.1, 12.1.1, 11.8.0, 11.7.1, 11.6.2, 11.5.2,11.4.4, 11.3.1, 11.2.2, 11.1.1, 11.0.3, cpu]
        cmake-build-type: [Release] # [Debug, ClangTidy]
    env:
      CCACHE_DIR: ${{ github.workspace }}/ccache
      CCACHE_BASEDIR: ${{ github.workspace }}
      CL: /MP
      CMAKE_GENERATOR: Ninja
      CMAKE_GENERATOR_PLATFORM: ${{matrix.arch}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Ubuntu
        run: |
          sudo apt-get update     
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libopencv-dev \
            wget
          wget -nv https://github.com/ccache/ccache/releases/download/v4.9.1/ccache-4.9.1-linux-x86_64.tar.xz
          sudo tar xf ccache-4.9.1-linux-x86_64.tar.xz -C /usr/bin --strip-components=1 --no-same-owner ccache-4.9.1-linux-x86_64/ccache
          rm -f ccache-*-linux-x86_64.tar.xz
          ccache --version

      - name: Sudo Tar Wrapper
        run: |
          # Workaround: https://github.com/containers/podman/discussions/17868
          sudo mv -fv /usr/bin/tar /usr/bin/tar.orig
          echo -e '#!/bin/sh\n\nsudo /usr/bin/tar.orig "$@"' | sudo tee -a /usr/bin/tar
          sudo chmod +x /usr/bin/tar

      - name: Restore CUDA Cache
        uses: actions/cache@v4
        id: cuda-cache
        with:
          key: cuda-${{matrix.CUDA-VERSION}}-ubuntu
          path: |
            /usr/local/cuda*

      - name: Install CUDA
        if: ${{ steps.cuda-cache.outputs.cache-hit != 'true' }}
        run: |
          bash .github/workflows/cuda/${{ runner.os }}.sh ${{ matrix.os }} ${{ matrix.cuda-version }}

      - name: Setup CUDA
        shell: bash
        run: |
          CUDA_VER_FULL=${{ matrix.cuda-version }}
          CUDA_VER_ARR=($(echo ${CUDA_VER_FULL} | tr "." " "))
          CUDA_VER="${CUDA_VER_ARR[0]}.${CUDA_VER_ARR[1]}"
          CUDA_VER_ID="${CUDA_VER_ARR[0]}_${CUDA_VER_ARR[1]}"
          CUDA_VER_SHORT="cu${CUDA_VER_ARR[0]}${CUDA_VER_ARR[1]}"          
          echo "CUDA_VER_SHORT=${CUDA_VER_SHORT}" >> ${GITHUB_ENV}

      - name: Free disk space
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /usr/lib/php* /opt/ghc || true
          df -h

      - name: Restore LibTorch Cache
        uses: actions/cache@v4
        id: libtorch-cache
        with:
          key: libtorch-${{ matrix.torch-version }}-${{env.CUDA_VER_SHORT}}-ubuntu
          path: |
            ${{ github.workspace }}/libtorch

      - name: Install LibTorch
        if: ${{ steps.libtorch-cache.outputs.cache-hit != 'true' }}
        run: |
          wget --no-check-certificate -nv https://download.pytorch.org/libtorch/${CUDA_VER_SHORT}/libtorch-cxx11-abi-shared-with-deps-${{ matrix.torch-version }}%2B${CUDA_VER_SHORT}.zip -O libtorch.zip
          unzip -q ${{ github.workspace }}/libtorch.zip -d ${{ github.workspace }}/
          rm ${{ github.workspace }}/libtorch.zip

      - name: Cache Build
        uses: actions/cache@v4
        id: cache-builds
        with:
          key: ${{ matrix.os }}-cuda-${{ matrix.cuda-version }}-torch-${{ matrix.torch-version }}-${{ matrix.cmake-build-type }}-ccache-${{ github.run_id }}
          restore-keys: ${{ matrix.os }}-cuda-${{ matrix.cuda-version }}-torch-${{ matrix.torch-version }}-${{ matrix.cmake-build-type }}-ccache-
          path: ${{ env.CCACHE_DIR }}

      - name: Configure And Build
        run: |
          set -x
          source .github/workflows/cuda/${{ runner.os }}-env.sh ${CUDA_VER_SHORT}
          cmake --version
          mkdir build
          cd build
          cmake .. \
            -G${CMAKE_GENERATOR} \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} \
            -DCMAKE_C_COMPILER_LAUNCHER=$(which ccache) \
            -DCMAKE_CXX_COMPILER_LAUNCHER=$(which ccache) \
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/libtorch \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install \
            -DCUDA_TOOLKIT_ROOT_DIR=$CUDA_HOME \
            -DOPENSPLAT_BUILD_SIMPLE_TRAINER=ON
          ninja

      - name: Save Artifacts
        if: ${{ matrix.os == 'ubuntu-22.04' && matrix.cuda-version == '12.1.1' && matrix.torch-version == '2.2.1' && matrix.cmake-build-type == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          path: |
            build/libgsplat.a
            build/opensplat
            build/simple_trainer

      - name: Clean Compiler Cache
        run: |
          set -x
          ccache --show-stats
          ccache --evict-older-than 7d
          ccache -s
          ccache --show-stats
